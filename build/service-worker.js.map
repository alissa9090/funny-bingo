{"version":3,"sources":["service-worker.js"],"names":["CACHE_NAME","FILES_TO_CACHE","self","addEventListener","evt","console","log","waitUntil","caches","open","then","cache","addAll","skipWaiting","keys","keyList","Promise","all","map","key","delete","clients","claim","request","url","respondWith","match","response","fetch"],"mappings":";AAEA,IAAMA,EAAa,mBACbC,EAAiB,CACrB,KACA,yBACA,2BACA,qBACA,qBAGFC,KAAKC,iBAAiB,UAAW,SAACC,GAChCC,QAAQC,IAAI,2BAEZF,EAAIG,UACFC,OAAOC,KAAKT,GAAYU,KAAK,SAACC,GAErBA,OADPN,QAAQC,IAAI,4CACLK,EAAMC,OAAOX,MAIxBC,KAAKW,gBAGPX,KAAKC,iBAAiB,WAAY,SAACC,GACjCC,QAAQC,IAAI,4BAEZF,EAAIG,UACFC,OAAOM,OAAOJ,KAAK,SAACK,GAAYC,OAAAA,QAAQC,IAAIF,EAAQG,IAAI,SAACC,GACnDA,GAAAA,IAAQnB,EAEHQ,OADPH,QAAQC,IAAI,qCAAsCa,GAC3CX,OAAOY,OAAOD,SAK3BjB,KAAKmB,QAAQC,UAGfpB,KAAKC,iBAAiB,QAAS,SAACC,GAC9BC,QAAQC,IAAI,wBAAyBF,EAAImB,QAAQC,KAEjDpB,EAAIqB,YACFjB,OAAOkB,MAAMtB,EAAImB,SAASb,KAAK,SAACiB,GAAaA,OAAAA,GAAYC,MAAMxB,EAAImB","file":"service-worker.js","sourceRoot":"..","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-restricted-globals */\nconst CACHE_NAME = 'funny-bingo-v1.0';\nconst FILES_TO_CACHE = [\n  './',\n  './manifest.webmanifest',\n  './bingo-icon-512x512.jpg',\n  './src.a2b27638.css',\n  './src.a2b27638.js'\n];\n\nself.addEventListener('install', (evt) => {\n  console.log('[ServiceWorker] Install');\n  // Precache resources here.\n  evt.waitUntil(\n    caches.open(CACHE_NAME).then((cache) => {\n      console.log('[ServiceWorker] Pre-caching offline page');\n      return cache.addAll(FILES_TO_CACHE);\n    })\n  );\n\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (evt) => {\n  console.log('[ServiceWorker] Activate');\n  // Remove previous cached data from disk.\n  evt.waitUntil(\n    caches.keys().then((keyList) => Promise.all(keyList.map((key) => {\n      if (key !== CACHE_NAME) {\n        console.log('[ServiceWorker] Removing old cache', key);\n        return caches.delete(key);\n      }\n    })))\n  );\n\n  self.clients.claim();\n});\n\nself.addEventListener('fetch', (evt) => {\n  console.log('[ServiceWorker] Fetch', evt.request.url);\n  // get from cache first. If doesn't exist then get from network\n  evt.respondWith(\n    caches.match(evt.request).then((response) => response || fetch(evt.request))\n  );\n});\n"]}